syntax = "v1"

info (
	title:   "device api"
	desc:    "device api"
	version: "v1.0"
)

import "../base.api"

// The information of captcha | 验证码数据
type DeviceSummary {
	AddxId         string `bson:"addxId,omitempty" json:"addxId,omitempty"`
	SerialNumber   string `bson:"serialNumber,omitempty" json:"serialNumber,omitempty"`
	Activated      *int64 `bson:"activated,omitempty" json:"activated,omitempty"`
	ActivatedTime  *int64 `bson:"activatedTime,omitempty" json:"activatedTime,omitempty"`
	AdminName      string `bson:"adminName,omitempty" json:"adminName,omitempty"`
	DeviceName     string `bson:"deviceName,omitempty" json:"deviceName,omitempty"`
	DeviceNetType  int64  `bson:"deviceNetType,omitempty" json:"deviceNetType,omitempty"`
	DeviceStatus   int64  `bson:"deviceStatus,omitempty" json:"deviceStatus,omitempty"`
	DeviceVipLevel int64  `bson:"deviceVipLevel,omitempty" json:"deviceVipLevel,omitempty"`
	FirmwareId     string `bson:"firmwareId,omitempty" json:"firmwareId,omitempty"`
	FirmwareStatus int64  `bson:"firmwareStatus,omitempty" json:"firmwareStatus,omitempty"`
	Icon           string `bson:"icon,omitempty" json:"icon,omitempty"`
	MacAddress     string `bson:"macAddress,omitempty" json:"macAddress,omitempty"`
	Online         int64  `bson:"online,omitempty" json:"online,omitempty"`
	PersonDetect   int64  `bson:"personDetect,omitempty" json:"personDetect,omitempty"`
	SupportBirdVip bool   `bson:"supportBirdVip,omitempty" json:"supportBirdVip,omitempty"`
}

// The response data of device
type DeviceListResp {
	BaseDataInfo
	Data []DeviceSummary `json:"data"`
}

@server (
	group:      device
	jwt:        Auth
	middleware: Authority
)
service Mms {
	// Get captcha | 获取验证码
	@handler queryLocalDevices
	post /queryLocalDevices returns (DeviceListResp)
}

