// Code generated by goctl. DO NOT EDIT.
package types

type ReplyReqVo struct {
	CommentId int64  `json:"commentId,optional"`
	Reply     string `json:"reply,optional"`
	AdminName string `json:"adminName,optional"`
}

type ReplyRespVo struct {
	Id         int64  `json:"id,optional"`
	CommentId  int64  `json:"commentId,optional"`
	Reply      string `json:"reply,optional"`
	AdminId    string `json:"adminId,optional"`
	AdminName  string `json:"adminName,optional"`
	CreateTime int64  `json:"createTime,optional"`
	UpdateTime int64  `json:"updateTime,optional"`
}

type CommentListReqVo struct {
	IsReply     int32   `json:"isReply,optional"`
	Title       string  `json:"title,optional"`
	Content     string  `json:"content,optional"`
	CommentTime []int64 `json:"commentTime,repeated,optional"`
	PageInfo
}

type CommentListRespVo struct {
	BaseMsgResp
	Data CommentListRespData `json:"data,optional"`
}

type CommentListRespData struct {
	Data  []CommentRespData `json:"data,repeated"`
	Total int               `json:"total,optional"`
}

type CommentIdReqVo struct {
	Id int64 `json:"id,optional"`
}

type CommentRespVo struct {
	BaseMsgResp
	Data CommentRespData `json:"data,optional"`
}

type CommentRespData struct {
	Id          int64         `json:"id,optional"`
	Title       string        `json:"title,optional"`
	Content     string        `json:"content,optional"`
	MemberId    string        `json:"memberId,optional"`
	Create_time int64         `json:"createTime,optional"`
	Update_time int64         `json:"updateTime,optional"`
	Reply       []ReplyRespVo `json:"reply,repeated"`
	IsReply     bool          `json:"isReply,optional"`
}

type ReplyListReqVo struct {
	AdminId string `json:"adminId,optional"`
	PageInfo
}

type DeviceVipSetReq struct {
	SerialNumber string `json:"serialNumber,optional"`
	ProductId    string `json:"productId,optional"`
}

type DeviceVipSetUpdateResp struct {
	BaseMsgResp
	Data string `json:"data,optional"`
}

type ReplyListRespVo struct {
	BaseMsgResp
	Data ReplyListRespData `json:"data,optional"`
}

type ReplyListRespData struct {
	List []ReplyRespVo `json:"replyList,repeated"`
}

// The basic response with data | ������������Ϣ
// swagger:model BaseDataInfo
type BaseDataInfo struct {
	// Error code | �������
	Code int `json:"code"`
	// Message | ��ʾ��Ϣ
	Msg string `json:"msg"`
	// Data | ����
	Data string `json:"data,omitempty"`
}

// The basic response with data | ������������Ϣ
// swagger:model BaseListInfo
type BaseListInfo struct {
	// The total number of data | ��������
	Total uint64 `json:"total"`
	// Data | ����
	Data string `json:"data,omitempty"`
}

// The basic response without data | ��������������Ϣ
// swagger:model BaseMsgResp
type BaseMsgResp struct {
	// Error code | �������
	Code int `json:"code"`
	// Message | ��ʾ��Ϣ
	Msg string `json:"msg"`
}

// The simplest message | ��򵥵���Ϣ
// swagger:response SimpleMsg
type SimpleMsg struct {
	// Message | ��Ϣ
	Msg string `json:"msg"`
}

// The page request parameters | �б��������
// swagger:model PageInfo
type PageInfo struct {
	// Page number | �ڼ�ҳ
	// Required: true
	Page uint64 `json:"page" validate:"number"`
	// Page size | ��ҳ��������
	// Required: true
	// Maximum: 100000
	PageSize uint64 `json:"pageSize" validate:"number,max=100000"`
}

// Basic ID request | ����ID��������
// swagger:model IDReq
type IDReq struct {
	// ID
	// Required: true
	Id uint64 `json:"id" validate:"number"`
}

// Basic IDs request | ����ID�����������
// swagger:model IDsReq
type IDsReq struct {
	// IDs
	// Required: true
	Ids []uint64 `json:"ids"`
}

// Basic ID request | ����ID��ַ��������
// swagger:model IDPathReq
type IDPathReq struct {
	// ID
	// Required: true
	Id uint64 `path:"id"`
}

// Basic UUID request | ����UUID��������
// swagger:model UUIDReq
type UUIDReq struct {
	// ID
	// Required: true
	// Max length: 36
	Id string `json:"id" validate:"len=36"`
}

// Basic UUID array request | ����UUID�����������
// swagger:model UUIDsReq
type UUIDsReq struct {
	// Ids
	// Required: true
	Ids []string `json:"ids"`
}

// The base response data | ������Ϣ
// swagger:model BaseIDInfo
type BaseIDInfo struct {
	// ID
	Id *uint64 `json:"id"`
	// Create date | ��������
	CreatedAt *int64 `json:"createdAt,optional"`
	// Update date | ��������
	UpdatedAt *int64 `json:"updatedAt,optional"`
}

// The base UUID response data | ������Ϣ
// swagger:model BaseUUIDInfo
type BaseUUIDInfo struct {
	// ID
	Id *string `json:"id"`
	// Create date | ��������
	CreatedAt *int64 `json:"createdAt,optional"`
	// Update date | ��������
	UpdatedAt *int64 `json:"updatedAt,optional"`
}

// The response data of member information | ��Ա��Ϣ
// swagger:model MemberInfo
type MemberInfo struct {
	BaseUUIDInfo
	// Status | ״̬
	Status *uint32 `json:"status,optional"`
	// Username | �û���
	Username *string `json:"username,optional"`
	// Password | ����
	Password *string `json:"password,optional"`
	// Nickname | �ǳ�
	Nickname *string `json:"nickname,optional"`
	// RankId | �ȼ�ID
	RankId *uint64 `json:"rankId,optional"`
	// Mobile | �ֻ�
	Mobile *string `json:"mobile,optional"`
	// Email | ����
	Email *string `json:"email,optional"`
	// Avatar | ͷ���ַ
	Avatar *string `json:"avatar,optional"`
}

// The response data of member list | ��Ա�б�����
// swagger:model MemberListResp
type MemberListResp struct {
	BaseDataInfo
	// Member list data | ��Ա�б�����
	Data MemberListInfo `json:"data"`
}

// Member list data | ��Ա�б�����
// swagger:model MemberListInfo
type MemberListInfo struct {
	BaseListInfo
	// The API list data | ��Ա�б�����
	Data []MemberInfo `json:"data"`
}

// Get member list request params | ��Ա�б��������
// swagger:model MemberListReq
type MemberListReq struct {
	PageInfo
	// Username | �û���
	Username *string `json:"username,optional"`
	// Nickname | �ǳ�
	Nickname *string `json:"nickname,optional"`
	// Mobile | �ֻ�
	Mobile *string `json:"mobile,optional"`
	// Email | ����
	Email *string `json:"email,optional"`
	// Rank ID | �ȼ�ID
	RankId *uint64 `json:"rankId,optional"`
}

// Member information response | ��Ա��Ϣ������
// swagger:model MemberInfoResp
type MemberInfoResp struct {
	BaseDataInfo
	// Member information | ��Ա����
	Data MemberInfo `json:"data"`
}

// Register request | ע�����
// swagger:model RegisterReq
type RegisterReq struct {
	// User Name | �û���
	// required : true
	// max length : 20
	Username string `json:"username" validate:"required,alphanum,max=20"`
	// Password | ����
	// required : true
	// max length : 30
	// min length : 6
	Password string `json:"password" validate:"required,max=30,min=6"`
	// Captcha ID which store in redis | ��֤����, ����redis��
	// required : true
	// max length : 20
	// min length : 20
	CaptchaId string `json:"captchaId" validate:"required,len=20"`
	// The Captcha which users input | �û��������֤��
	// required : true
	// max length : 5
	// min length : 5
	Captcha string `json:"captcha" validate:"required,len=5"`
	// The user's email address | �û�������
	// required : true
	// max length : 100
	Email string `json:"email" validate:"required,email,max=100"`
}

// Register by email request | ����ע�����
// swagger:model RegisterByEmailReq
type RegisterByEmailReq struct {
	// User Name | �û���
	// required : true
	// max length : 20
	Username string `json:"username" validate:"required,alphanum,max=20"`
	// Password | ����
	// required : true
	// max length : 30
	// min length : 6
	Password string `json:"password" validate:"required,max=30,min=6"`
	// The Captcha which users input | �û��������֤��
	// required : true
	// max length : 5
	// min length : 5
	Captcha string `json:"captcha" validate:"required,len=5"`
	// The user's email address | �û�������
	// required : true
	// max length : 100
	Email string `json:"email" validate:"required,email,max=100"`
}

// Register by SMS request | ����ע�����
// swagger:model RegisterBySmsReq
type RegisterBySmsReq struct {
	// User Name | �û���
	// required : true
	// max length : 20
	Username string `json:"username" validate:"required,alphanum,max=20"`
	// Password | ����
	// required : true
	// max length : 30
	// min length : 6
	Password string `json:"password" validate:"required,max=30,min=6"`
	// The Captcha which users input | �û��������֤��
	// required : true
	// max length : 5
	// min length : 5
	Captcha string `json:"captcha" validate:"required,len=5"`
	// The user's mobile phone number | �û����ֻ�����
	// required : true
	// max length : 20
	PhoneNumber string `json:"phoneNumber"  validate:"required,numeric,max=20"`
}

// Log in request | ��¼����
// swagger:model LoginReq
type LoginReq struct {
	// User Name | �û���
	// required : true
	// max length : 20
	Username string `json:"username" validate:"required,alphanum,max=20"`
	// Password | ����
	// required : true
	// max length : 30
	// min length : 6
	Password string `json:"password" validate:"required,max=30,min=6"`
	// Captcha ID which store in redis | ��֤����, ����redis��
	// max length : 20
	// min length : 20
	CaptchaId string `json:"captchaId,optional"  validate:"omitempty,len=20"`
	// The Captcha which users input | �û��������֤��
	// max length : 5
	// min length : 5
	Captcha string `json:"captcha,optional" validate:"omitempty,len=5"`
}

// Log in by email request | �����¼����
// swagger:model LoginByEmailReq
type LoginByEmailReq struct {
	// The user's email address | �û�������
	// required : true
	// max length : 100
	Email string `json:"email" validate:"required,email,max=100"`
	// The Captcha which users input | �û��������֤��
	// max length : 5
	// min length : 5
	Captcha string `json:"captcha,optional" validate:"omitempty,len=5"`
}

// Log in by SMS request | ���ŵ�¼����
// swagger:model LoginBySmsReq
type LoginBySmsReq struct {
	// The user's mobile phone number | �û����ֻ�����
	// required : true
	// max length : 20
	PhoneNumber string `json:"phoneNumber"  validate:"required,numeric,max=20"`
	// The Captcha which users input | �û��������֤��
	// max length : 5
	// min length : 5
	Captcha string `json:"captcha,optional" validate:"omitempty,len=5"`
}

// The log in response data | ��¼��������
// swagger:model LoginResp
type LoginResp struct {
	BaseDataInfo
	// The log in information | ��½���ص�������Ϣ
	Data LoginInfo `json:"data"`
}

// The log in information | ��½���ص�������Ϣ
// swagger:model LoginInfo
type LoginInfo struct {
	// User's UUID | �û���UUID
	UserId string `json:"userId"`
	// Rank Code | �ȼ���
	RankId string `json:"rankId"`
	// Token for authorization | ��֤���ݵ�token
	Token string `json:"token"`
	// Expire timestamp | ����ʱ���
	Expire uint64 `json:"expire"`
	// Avatar | �û�ͷ��
	Avatar string `json:"avatar"`
	// Nickname | �û��ǳ�
	Nickname string `json:"nickname"`
	// RankName | �ȼ�����
	RankName string `json:"rankName"`
}

// The modify info | ������Ϣ�޸�����
// swagger:model ModifyProfileReq
type ModifyProfileReq struct {
	// Nickname | �ǳ�
	Nickname *string `json:"nickname,optional"`
	// Mobile | �ֻ�
	Mobile *string `json:"mobile,optional"`
	// Email | ����
	Email *string `json:"email,optional"`
	// Avatar | ͷ���ַ
	Avatar *string `json:"avatar,optional"`
}

// Reset password by email request | ͨ������������������
// swagger:model ResetPasswordByEmailReq
type ResetPasswordByEmailReq struct {
	Email    string `json:"email" validate:"email"`
	Captcha  string `json:"captcha"`
	Password string `json:"password"`
}

// Reset password by SMS request | ͨ������������������
// swagger:model ResetPasswordBySmsReq
type ResetPasswordBySmsReq struct {
	// max length : 20
	PhoneNumber string `json:"phoneNumber" validate:"numeric,max=20"`
	Captcha     string `json:"captcha"`
	Password    string `json:"password"`
}

// Bind wechat request | ��΢������
// swagger:model BindWechatReq
type BindWechatReq struct {
	Code string `json:"code"`
}

// The response data of member rank information | ��Ա�ȼ���Ϣ
// swagger:model MemberRankInfo
type MemberRankInfo struct {
	BaseIDInfo
	// Translated Name | ���ʻ�����
	Trans string `json:"trans,optional"`
	// Rank name | �ȼ�����
	Name *string `json:"name,optional"`
	// Description | �ȼ�����
	Description *string `json:"description,optional"`
	// Remark | ��ע
	Remark *string `json:"remark,optional"`
	// Rank Code | �ȼ�����
	Code *string `json:"code,optional"`
}

// The response data of member rank list | ��Ա�ȼ��б�����
// swagger:model MemberRankListResp
type MemberRankListResp struct {
	BaseDataInfo
	// MemberRank list data | ��Ա�ȼ��б�����
	Data MemberRankListInfo `json:"data"`
}

// MemberRank list data | ��Ա�ȼ��б�����
// swagger:model MemberRankListInfo
type MemberRankListInfo struct {
	BaseListInfo
	// The API list data | ��Ա�ȼ��б�����
	Data []MemberRankInfo `json:"data"`
}

// Get member rank list request params | ��Ա�ȼ��б��������
// swagger:model MemberRankListReq
type MemberRankListReq struct {
	PageInfo
	// Name | �ȼ�����
	Name *string `json:"name,optional"`
	// Description | ����
	Description *string `json:"description,optional"`
	// Remark | ��ע
	Remark *string `json:"remark,optional"`
}

// MemberRank information response | ��Ա�ȼ���Ϣ������
// swagger:model MemberRankInfoResp
type MemberRankInfoResp struct {
	BaseDataInfo
	// MemberRank information | ��Ա�ȼ�����
	Data MemberRankInfo `json:"data"`
}

// The response data of token information | Token��Ϣ
// swagger:model TokenInfo
type TokenInfo struct {
	BaseUUIDInfo
	// Status | ״̬
	Status *uint32 `json:"status,optional"`
	// User's UUID | �û���UUID
	Uuid *string `json:"uuid,optional"`
	// Token | �û���Token
	Token *string `json:"token,optional"`
	// Source | Token ��Դ
	Source *string `json:"source,optional"`
	// Username | �û���
	Username *string `json:"username,optional"`
	// ExpiredAt | ����ʱ��
	ExpiredAt *int64 `json:"expiredAt,optional"`
}

// The response data of token list | Token�б�����
// swagger:model TokenListResp
type TokenListResp struct {
	BaseDataInfo
	// Token list data | Token�б�����
	Data TokenListInfo `json:"data"`
}

// Token list data | Token�б�����
// swagger:model TokenListInfo
type TokenListInfo struct {
	BaseListInfo
	// The API list data | Token�б�����
	Data []TokenInfo `json:"data"`
}

// Get token list request params | Token�б��������
// swagger:model TokenListReq
type TokenListReq struct {
	PageInfo
	// Username
	Username *string `json:"username,optional"`
	// Nickname
	Nickname *string `json:"nickname,optional"`
	// Email
	Email *string `json:"email,optional"`
	// Uuid
	Uuid *string `json:"uuid,optional"`
}

// Token information response | Token��Ϣ������
// swagger:model TokenInfoResp
type TokenInfoResp struct {
	BaseDataInfo
	// Token information | Token����
	Data TokenInfo `json:"data"`
}

// The response data of oauth provider information | ��������Ϣ
// swagger:model OauthProviderInfo
type OauthProviderInfo struct {
	BaseIDInfo
	// Provider name | �������ṩ������
	// max length : 30
	Name *string `json:"name,optional" validate:"omitempty,max=30"`
	// ClientId | �ͻ���ID
	// max length : 80
	ClientId *string `json:"clientId,optional" validate:"omitempty,max=80"`
	// ClientSecret | �ͻ�����Կ
	// max length : 100
	ClientSecret *string `json:"clientSecret,optional" validate:"omitempty,max=100"`
	// Redirect URL| ��ת��ַ
	// max length : 300
	RedirectUrl *string `json:"redirectUrl,optional" validate:"omitempty,max=300"`
	// Scopes | ��Ȩ��Χ
	// max length : 50
	Scopes *string `json:"scopes,optional" validate:"omitempty,max=50"`
	// Authority URL | ��Ȩ��ַ
	// max length : 300
	AuthUrl *string `json:"authUrl,optional" validate:"omitempty,max=300"`
	// The URL to get token | ��ȡToken�ĵ�ַ
	// max length : 300
	TokenUrl *string `json:"tokenUrl,optional" validate:"omitempty,max=300"`
	// The type of auth | ��Ȩ��ʽ
	// max : 20
	AuthStyle *uint64 `json:"authStyle,optional" validate:"omitempty,lt=20"`
	// The URL to get user information | ��ȡ��Ϣ��ַ
	// max length : 300
	InfoUrl *string `json:"infoUrl,optional" validate:"omitempty,max=300"`
}

// The response data of oauth provider list | �������б�����
// swagger:model OauthProviderListResp
type OauthProviderListResp struct {
	BaseDataInfo
	// OauthProvider list data | �������б�����
	Data OauthProviderListInfo `json:"data"`
}

// OauthProvider list data | �������б�����
// swagger:model OauthProviderListInfo
type OauthProviderListInfo struct {
	BaseListInfo
	// The API list data | �������б�����
	Data []OauthProviderInfo `json:"data"`
}

// Get oauth provider list request params | �������б��������
// swagger:model OauthProviderListReq
type OauthProviderListReq struct {
	PageInfo
	// Name | �������ṩ������
	// max length : 30
	Name *string `json:"name,optional" validate:"omitempty,max=30"`
}

// Oauth provider information response | ��������Ϣ������
// swagger:model OauthProviderInfoResp
type OauthProviderInfoResp struct {
	BaseDataInfo
	// OauthProvider information | ����������
	Data OauthProviderInfo `json:"data"`
}

// Oauth log in request | Oauth ��¼����
// swagger:model OauthLoginReq
type OauthLoginReq struct {
	// State code to avoid hack | ״̬�룬����ǰ����ͬ���ⰲȫ����
	// required : true
	// max length : 30
	State string `json:"state" validate:"required,max=30"`
	// Provider name | �ṩ������
	// Example: google
	// required : true
	// max length : 40
	Provider string `json:"provider" validate:"required,max=40"`
}

// Redirect response | ��ת��ַ������Ϣ
// swagger:model RedirectResp
type RedirectResp struct {
	BaseDataInfo
	// Redirect information | ��ת��ַ
	Data RedirectInfo `json:"data"`
}

// Redirect information | ��ת��ַ
// swagger:model RedirectInfo
type RedirectInfo struct {
	// Redirect URL | ��ת��ַ
	URL string `json:"URL"`
}

// The oauth log in response data | ��������¼��������
// swagger:model CallbackResp
type CallbackResp struct {
	BaseDataInfo
	// The oauth log in callback information | ��������½���ص�������Ϣ
	Data CallbackInfo `json:"data"`
}

// The oauth callback info response data | Oauth�ص�����
// swagger:model CallbackInfo
type CallbackInfo struct {
	// User's UUID | �û���UUID
	UserId string `json:"userId"`
	// Rank ID | �ȼ� ID
	RankId string `json:"rankId"`
	// Token for authorization | ��֤���ݵ�token
	Token string `json:"token"`
	// Expire timestamp | ����ʱ���
	Expire int64 `json:"expire"`
	// Avatar | �û�ͷ��
	Avatar string `json:"avatar"`
	// Nickname | �û��ǳ�
	Nickname string `json:"nickname"`
	// RankName | �ȼ�����
	RankName string `json:"rankName"`
}

// Wechat mini program login request | ΢��С�����¼����
// swagger:model WechatMiniProgramLoginReq
type WechatMiniProgramLoginReq struct {
	// Code
	Code string `json:"code"`
}

// The information of captcha | ��֤������
// swagger:model CaptchaInfo
type CaptchaInfo struct {
	CaptchaId string `json:"captchaId"`
	ImgPath   string `json:"imgPath"`
}

// The response data of captcha | ��֤�뷵������
// swagger:model CaptchaResp
type CaptchaResp struct {
	BaseDataInfo
	// The menu authorization data | �˵���Ȩ��Ϣ����
	Data CaptchaInfo `json:"data"`
}

// The email captcha request | ������֤���������
// swagger:model EmailCaptchaReq
type EmailCaptchaReq struct {
	// The email address | �����ַ
	Email string `json:"email"`
}

// The sms captcha request | ������֤���������
// swagger:model SmsCaptchaReq
type SmsCaptchaReq struct {
	// The phone number | �绰����
	PhoneNumber string `json:"phoneNumber"`
}


type DeviceListResp struct {
	BaseDataInfo
	Data []DeviceSummary `json:"data"`
}

type DeviceSummary struct {
	AddxId         string `bson:"addxId,optional" json:"addxId,optional"`
	SerialNumber   string `bson:"serialNumber,optional" json:"serialNumber,optional"`
	Activated      *int64 `bson:"activated,optional" json:"activated,optional"`
	ActivatedTime  *int64 `bson:"activatedTime,optional" json:"activatedTime,optional"`
	AdminName      string `bson:"adminName,optional" json:"adminName,optional"`
	DeviceName     string `bson:"deviceName,optional" json:"deviceName,optional"`
	DeviceNetType  int64  `bson:"deviceNetType,optional" json:"deviceNetType,optional"`
	DeviceStatus   int64  `bson:"deviceStatus,optional" json:"deviceStatus,optional"`
	DeviceVipLevel int64  `bson:"deviceVipLevel,optional" json:"deviceVipLevel,optional"`
	FirmwareId     string `bson:"firmwareId,optional" json:"firmwareId,optional"`
	FirmwareStatus int64  `bson:"firmwareStatus,optional" json:"firmwareStatus,optional"`
	Icon           string `bson:"icon,optional" json:"icon,optional"`
	MacAddress     string `bson:"macAddress,optional" json:"macAddress,optional"`
	Online         int64  `bson:"online,optional" json:"online,optional"`
	PersonDetect   int64  `bson:"personDetect,optional" json:"personDetect,optional"`
	SupportBirdVip bool   `bson:"supportBirdVip,optional" json:"supportBirdVip,optional"`
}

type QueryReq struct {
	PageInfo
	Owner          string `json:"owner,optional"`
	ActivatedTime  int64  `json:"activatedTime,optional"`
	DeviceVipLevel int64  `json:"deviceVipLevel,optional"`
}
